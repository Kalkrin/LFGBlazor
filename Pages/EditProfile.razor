@page "/editprofile/{userId:int}"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserService _UserService

@if(existingUser is not null)
{
<span>@message</span>
<div class="container">
    <form>
        <EditForm Model="userToUpdate" OnSubmit="HandleUpdate">
            <div class="form-group">
                <label for="username">Username</label>
                <InputText class="form-control" id="username" @bind-Value="existingUser.Username" />
            </div>
            <div class="form-group">
                <label for="profilepicture">ProfilePicture</label>
                <InputText class="form-control" id="profilepicture" @bind-Value="existingUser.ProfilePicture" />
            </div>
            <div class="form-group">
                <label for="bio">Bio</label>
                <InputTextArea class="form-control" id="bio" @bind-Value="existingUser.Bio" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText class="form-control" id="password" @bind-Value="userToUpdate.Password" type="password" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText class="form-control" id="confirmpassword" @bind-Value="confirmPassword" type="password" />
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Update Profile</button>
        </EditForm>
    </form>
</div>
}
else
{
    <span>@message</span>
}

@code{
    [Parameter]
    public int userId { get; set; }
    private UpdateUserDto userToUpdate = new UpdateUserDto();
    private PublicUserDto existingUser = null;
    private string message;
    
    private string confirmPassword;
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();

        var currentUserId = authstate.User.Identities.First().Claims.FirstOrDefault(c => c.Type == "nameid").Value;
        var result = await _UserService.GetUserById(Int32.Parse(currentUserId));
        if(!result.Success)
        {
            message = result.Message;
        }
        else 
        {
            existingUser = result.Data;
        }
    }
    
    async void HandleUpdate(){
        try{
            userToUpdate.Email = existingUser.Email;
            userToUpdate.FirstName = existingUser.FirstName;
            userToUpdate.LastName = existingUser.LastName;
            userToUpdate.Bio = existingUser.Bio;
            userToUpdate.ProfilePicture = existingUser.ProfilePicture;
            userToUpdate.Username = existingUser.Username;

            if(confirmPassword != userToUpdate.Password)
            {
                throw new Exception("badPassword");
            }

            var result = await _UserService.UpdateUser(userId, userToUpdate);
            if(!result.Success)
            {
                message = "Bad data, try again";
            }
            else 
            {
                NavigationManager.NavigateTo("profile");
            }
        } catch(Exception e){
            if(e.Message == "badPassword")
                message = "passwords do not match";
            
            message = "Bad data, try again";
        }
    }
}