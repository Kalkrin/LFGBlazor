@inject GameService GameService
@inject RequestService RequestService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@if(response.Data is null)
{
    <span>@message</span>
}
else
{
   <ul class="list-unstyled">
    @foreach (PublicGameDto game in response.Data)
    {
        <li>
            <div class="card mb-3">
                <img src="@game.Thumbnail" class="card-img-top" />
                <div class="card-body">
                    <h5 class="card-title">@game.Name</h5>
                    <p class="card-text">@game.Description</p>
                    <p class="card-text text-muted">GM: @game.Players.FirstOrDefault(p => p.Id == game.Creator).Username</p>
                    <p class="card-text text-muted">Created: @String.Format("{0:MM/dd/yyyy}", game.CreatedAt)</p>
                    <p class="card-text"><span class="oi oi-person" aria-hidden="true"/>&nbsp; @game.Players.Count()</p>
                    <AuthorizeView>
                        <Authorized>
                            @if(currentUserId == game.Creator)
                            {
                                <button @onclick="() => HandleEdit(game.Id)" class="btn btn-warning">Edit Game</button>
                                <button @onclick="() => HandleDelete(game.Id)" class="btn btn-danger">Delete Game</button>
                            }
                            @if(game.Players.Exists(p => p.Id == currentUserId) && currentUserId != game.Creator)
                            {
                                <button @onclick="() => HandleQuit(game.Id)" class="btn btn-danger">Leave Game</button>
                            }
                            @if(!game.Players.Exists(p => p.Id == currentUserId) && currentUserId != game.Creator)
                            {
                                @if(reqResponce.Data.Exists(r => r.Game.Id == game.Id && r.Status == Status.Undecided))
                                {
                                    <button class="btn btn-success" disabled="true">Request Pending..</button>
                                }
                                else
                                {
                                    <button @onclick="() => HandleRequest(game.Id)" class="btn btn-success">Request To Join</button>    
                                }
                                
                            }
                        </Authorized>
                    </AuthorizeView>
               </div>
            </div>
        </li>
    }
    </ul> 
}
@code
{
    private ServiceResponse<List<PublicGameDto>> response = new ServiceResponse<List<PublicGameDto>>();
    private ServiceResponse<List<PublicRequestDto>> reqResponce = new ServiceResponse<List<PublicRequestDto>>();
    private string message = string.Empty;
    private int currentUserId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
            if(authstate.User.Identities.First().Claims.Count() > 0)
                int.TryParse(authstate.User.Identities.First().Claims.FirstOrDefault(c => c.Type == "nameid").Value, out currentUserId);

            response = await GameService.GetAllGames();
            if(!response.Success)
            {
                message = response.Message;
                return;
            }

            if(currentUserId > 0)
            {
                reqResponce = await RequestService.GetRequestByUserId(currentUserId);

            }
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }



    async void HandleRequest(int gameId)
    {
        AddRequestDto addRequest = new AddRequestDto
            {
                GameId = gameId
            };
        try
        {
            var result = await RequestService.CreateRequest(addRequest);

            if(!result.Success)
            {
                message = result.Message;
                return;
            }
            else
            {
                message = result.Message;
                reqResponce.Data.Add(result.Data);
                StateHasChanged();
            }
        } catch (Exception e)
        {
            message = e.Message;
        }

    }

    void HandleEdit(int id)
    {
        NavigationManager.NavigateTo($"editgame/{id}");
    }

    void HandleDelete(int id)
    {
        try
        {
            GameService.DeleteGame(id);
            response.Data.RemoveAll(g => g.Id == id);
            StateHasChanged();
        }
        catch(Exception e)
        {
            message = e.Message;
        }
    }

    async void HandleQuit(int gameId)
    {
        try
        {
            PublicGameDto gameToUpdate = response.Data.FirstOrDefault(g => g.Id == gameId);

            UpdateGameDto updateGameDto = new UpdateGameDto
                {
                    Name = gameToUpdate.Name,
                    Description = gameToUpdate.Description,
                    Thumbnail = gameToUpdate.Thumbnail,
                    PlayersToAdd = new List<int>(),
                    PlayersToRemove = new List<int>
                        {
                            currentUserId
                        }
                };

                var result = await GameService.EditGame(updateGameDto, gameId);
                if(!result.Success)
                {
                    message = result.Message;
                    return;
                }

                if(result.Data is not null)
                {
                    response.Data.FirstOrDefault(g => g.Id == gameId).Players.RemoveAll(p => p.Id == currentUserId);
                    StateHasChanged();
                }
            }
            catch(Exception e)
            {
                message = e.Message;
            }
    }
}