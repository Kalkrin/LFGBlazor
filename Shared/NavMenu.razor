@inject RequestService RequestService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">LFGWebApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-monitor" aria-hidden="true"></span> Games
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="oi oi-person" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
     
                @if (reqResponce.Success &&  reqResponce.Data.Exists(r => r.Status == Status.Undecided))
                {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="requests">
                        <span class="oi oi-inbox" aria-hidden="true"></span> Requests: @RequestService.Count
                    </NavLink>
                </div>
                }
                else
                {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="requests">
                        <span class="oi oi-inbox" aria-hidden="true"></span> Requests: 0
                    </NavLink>
                </div>    
                }
            </nav>
        </div>
    </Authorized>
    <NotAuthorized>
         <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-monitor" aria-hidden="true"></span> Games
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-person" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </nav>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private ServiceResponse<List<PublicRequestDto>> reqResponce = new ServiceResponse<List<PublicRequestDto>>();
    private string message = string.Empty;
    private int currentUserId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            RequestService.OnCountChange += StateHasChanged;
            var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
            if(authstate.User.Identities.First().Claims.Count() > 0)
                int.TryParse(authstate.User.Identities.First().Claims.FirstOrDefault(c => c.Type == "nameid").Value, out currentUserId);

            if(currentUserId > 0)
            {
                reqResponce = await RequestService.GetRequestForCreator(currentUserId);
                RequestService.SetCount(reqResponce.Data.Where(r => r.Status == Status.Undecided).Count());
            }
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }  

    public void Dispose()
    {
        RequestService.OnCountChange -= StateHasChanged;
    }
}
